/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AgriProject {
  export type ProjectStruct = {
    id: BigNumberish;
    name: string;
    description: string;
    location: string;
    projectOwner: AddressLike;
    fundingGoal: BigNumberish;
    totalFunded: BigNumberish;
    minInvestment: BigNumberish;
    expectedReturn: BigNumberish;
    deadline: BigNumberish;
    duration: BigNumberish;
    status: BigNumberish;
    fundsWithdrawn: boolean;
  };

  export type ProjectStructOutput = [
    id: bigint,
    name: string,
    description: string,
    location: string,
    projectOwner: string,
    fundingGoal: bigint,
    totalFunded: bigint,
    minInvestment: bigint,
    expectedReturn: bigint,
    deadline: bigint,
    duration: bigint,
    status: bigint,
    fundsWithdrawn: boolean,
  ] & {
    id: bigint;
    name: string;
    description: string;
    location: string;
    projectOwner: string;
    fundingGoal: bigint;
    totalFunded: bigint;
    minInvestment: bigint;
    expectedReturn: bigint;
    deadline: bigint;
    duration: bigint;
    status: bigint;
    fundsWithdrawn: boolean;
  };

  export type InvestmentStruct = {
    investor: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    withdrawn: boolean;
  };

  export type InvestmentStructOutput = [investor: string, amount: bigint, timestamp: bigint, withdrawn: boolean] & {
    investor: string;
    amount: bigint;
    timestamp: bigint;
    withdrawn: boolean;
  };
}

export interface AgriProjectInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelProject"
      | "createProject"
      | "distributeReturns"
      | "getInvestorAmount"
      | "getProject"
      | "getProjectInvestments"
      | "invest"
      | "investorAmounts"
      | "owner"
      | "platformFee"
      | "projectCounter"
      | "projectInvestments"
      | "projects"
      | "renounceOwnership"
      | "stableCoin"
      | "transferOwnership"
      | "updatePlatformFee"
      | "withdrawFunds",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsWithdrawn"
      | "InvestmentMade"
      | "OwnershipTransferred"
      | "ProjectCancelled"
      | "ProjectCompleted"
      | "ProjectCreated"
      | "ProjectFunded"
      | "ReturnsDistributed",
  ): EventFragment;

  encodeFunctionData(functionFragment: "cancelProject", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "distributeReturns", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getInvestorAmount", values: [BigNumberish, AddressLike]): string;
  encodeFunctionData(functionFragment: "getProject", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getProjectInvestments", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "invest", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "investorAmounts", values: [BigNumberish, AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "platformFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "projectCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "projectInvestments", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "projects", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "stableCoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "updatePlatformFee", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "withdrawFunds", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "cancelProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distributeReturns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInvestorAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProjectInvestments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "investorAmounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platformFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectInvestments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stableCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePlatformFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawFunds", data: BytesLike): Result;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [projectId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [projectId: bigint, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [projectId: BigNumberish, investor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [projectId: bigint, investor: string, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCancelledEvent {
  export type InputTuple = [projectId: BigNumberish];
  export type OutputTuple = [projectId: bigint];
  export interface OutputObject {
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCompletedEvent {
  export type InputTuple = [projectId: BigNumberish];
  export type OutputTuple = [projectId: bigint];
  export interface OutputObject {
    projectId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    name: string,
    projectOwner: AddressLike,
    fundingGoal: BigNumberish,
  ];
  export type OutputTuple = [projectId: bigint, name: string, projectOwner: string, fundingGoal: bigint];
  export interface OutputObject {
    projectId: bigint;
    name: string;
    projectOwner: string;
    fundingGoal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectFundedEvent {
  export type InputTuple = [projectId: BigNumberish, totalAmount: BigNumberish];
  export type OutputTuple = [projectId: bigint, totalAmount: bigint];
  export interface OutputObject {
    projectId: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReturnsDistributedEvent {
  export type InputTuple = [projectId: BigNumberish, totalAmount: BigNumberish];
  export type OutputTuple = [projectId: bigint, totalAmount: bigint];
  export interface OutputObject {
    projectId: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgriProject extends BaseContract {
  connect(runner?: ContractRunner | null): AgriProject;
  waitForDeployment(): Promise<this>;

  interface: AgriProjectInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  cancelProject: TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;

  createProject: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _location: string,
      _fundingGoal: BigNumberish,
      _minInvestment: BigNumberish,
      _expectedReturn: BigNumberish,
      _deadline: BigNumberish,
      _duration: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;

  distributeReturns: TypedContractMethod<[_projectId: BigNumberish, _totalReturns: BigNumberish], [void], "nonpayable">;

  getInvestorAmount: TypedContractMethod<[_projectId: BigNumberish, _investor: AddressLike], [bigint], "view">;

  getProject: TypedContractMethod<[_projectId: BigNumberish], [AgriProject.ProjectStructOutput], "view">;

  getProjectInvestments: TypedContractMethod<
    [_projectId: BigNumberish],
    [AgriProject.InvestmentStructOutput[]],
    "view"
  >;

  invest: TypedContractMethod<[_projectId: BigNumberish, _amount: BigNumberish], [void], "nonpayable">;

  investorAmounts: TypedContractMethod<[arg0: BigNumberish, arg1: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  projectCounter: TypedContractMethod<[], [bigint], "view">;

  projectInvestments: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        investor: string;
        amount: bigint;
        timestamp: bigint;
        withdrawn: boolean;
      },
    ],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        description: string;
        location: string;
        projectOwner: string;
        fundingGoal: bigint;
        totalFunded: bigint;
        minInvestment: bigint;
        expectedReturn: bigint;
        deadline: bigint;
        duration: bigint;
        status: bigint;
        fundsWithdrawn: boolean;
      },
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stableCoin: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  updatePlatformFee: TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;

  withdrawFunds: TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "cancelProject"): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProject",
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _location: string,
      _fundingGoal: BigNumberish,
      _minInvestment: BigNumberish,
      _expectedReturn: BigNumberish,
      _deadline: BigNumberish,
      _duration: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeReturns",
  ): TypedContractMethod<[_projectId: BigNumberish, _totalReturns: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getInvestorAmount",
  ): TypedContractMethod<[_projectId: BigNumberish, _investor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProject",
  ): TypedContractMethod<[_projectId: BigNumberish], [AgriProject.ProjectStructOutput], "view">;
  getFunction(
    nameOrSignature: "getProjectInvestments",
  ): TypedContractMethod<[_projectId: BigNumberish], [AgriProject.InvestmentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "invest",
  ): TypedContractMethod<[_projectId: BigNumberish, _amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "investorAmounts",
  ): TypedContractMethod<[arg0: BigNumberish, arg1: AddressLike], [bigint], "view">;
  getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "platformFee"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "projectCounter"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "projectInvestments"): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        investor: string;
        amount: bigint;
        timestamp: bigint;
        withdrawn: boolean;
      },
    ],
    "view"
  >;
  getFunction(nameOrSignature: "projects"): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        description: string;
        location: string;
        projectOwner: string;
        fundingGoal: bigint;
        totalFunded: bigint;
        minInvestment: bigint;
        expectedReturn: bigint;
        deadline: bigint;
        duration: bigint;
        status: bigint;
        fundsWithdrawn: boolean;
      },
    ],
    "view"
  >;
  getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "stableCoin"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "updatePlatformFee"): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "withdrawFunds"): TypedContractMethod<[_projectId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FundsWithdrawn",
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentMade",
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCancelled",
  ): TypedContractEvent<
    ProjectCancelledEvent.InputTuple,
    ProjectCancelledEvent.OutputTuple,
    ProjectCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCompleted",
  ): TypedContractEvent<
    ProjectCompletedEvent.InputTuple,
    ProjectCompletedEvent.OutputTuple,
    ProjectCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated",
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectFunded",
  ): TypedContractEvent<ProjectFundedEvent.InputTuple, ProjectFundedEvent.OutputTuple, ProjectFundedEvent.OutputObject>;
  getEvent(
    key: "ReturnsDistributed",
  ): TypedContractEvent<
    ReturnsDistributedEvent.InputTuple,
    ReturnsDistributedEvent.OutputTuple,
    ReturnsDistributedEvent.OutputObject
  >;

  filters: {
    "FundsWithdrawn(uint256,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "InvestmentMade(uint256,address,uint256)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectCancelled(uint256)": TypedContractEvent<
      ProjectCancelledEvent.InputTuple,
      ProjectCancelledEvent.OutputTuple,
      ProjectCancelledEvent.OutputObject
    >;
    ProjectCancelled: TypedContractEvent<
      ProjectCancelledEvent.InputTuple,
      ProjectCancelledEvent.OutputTuple,
      ProjectCancelledEvent.OutputObject
    >;

    "ProjectCompleted(uint256)": TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;
    ProjectCompleted: TypedContractEvent<
      ProjectCompletedEvent.InputTuple,
      ProjectCompletedEvent.OutputTuple,
      ProjectCompletedEvent.OutputObject
    >;

    "ProjectCreated(uint256,string,address,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectFunded(uint256,uint256)": TypedContractEvent<
      ProjectFundedEvent.InputTuple,
      ProjectFundedEvent.OutputTuple,
      ProjectFundedEvent.OutputObject
    >;
    ProjectFunded: TypedContractEvent<
      ProjectFundedEvent.InputTuple,
      ProjectFundedEvent.OutputTuple,
      ProjectFundedEvent.OutputObject
    >;

    "ReturnsDistributed(uint256,uint256)": TypedContractEvent<
      ReturnsDistributedEvent.InputTuple,
      ReturnsDistributedEvent.OutputTuple,
      ReturnsDistributedEvent.OutputObject
    >;
    ReturnsDistributed: TypedContractEvent<
      ReturnsDistributedEvent.InputTuple,
      ReturnsDistributedEvent.OutputTuple,
      ReturnsDistributedEvent.OutputObject
    >;
  };
}
